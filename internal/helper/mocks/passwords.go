// Code generated by MockGen. DO NOT EDIT.
// Source: internal/helper/passwords.go
//
// Generated by this command:
//
//	mockgen -source=internal/helper/passwords.go -destination=internal/helper/mocks/passwords.go
//

// Package mock_helper is a generated GoMock package.
package mock_helper

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPasswordCrypto is a mock of PasswordCrypto interface.
type MockPasswordCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordCryptoMockRecorder
}

// MockPasswordCryptoMockRecorder is the mock recorder for MockPasswordCrypto.
type MockPasswordCryptoMockRecorder struct {
	mock *MockPasswordCrypto
}

// NewMockPasswordCrypto creates a new mock instance.
func NewMockPasswordCrypto(ctrl *gomock.Controller) *MockPasswordCrypto {
	mock := &MockPasswordCrypto{ctrl: ctrl}
	mock.recorder = &MockPasswordCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordCrypto) EXPECT() *MockPasswordCryptoMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockPasswordCrypto) ComparePassword(hashedPassword, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockPasswordCryptoMockRecorder) ComparePassword(hashedPassword, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockPasswordCrypto)(nil).ComparePassword), hashedPassword, password)
}

// HashPassword mocks base method.
func (m *MockPasswordCrypto) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockPasswordCryptoMockRecorder) HashPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockPasswordCrypto)(nil).HashPassword), password)
}
